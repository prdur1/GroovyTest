def v 
def g
import groovy.json.JsonSlurper
import groovy.util.XmlSlurper
import jenkins.*
import jenkins.model.*
import hudson.model.*
def flow
def artifactId


node('openstack') {
   ANT_HOME=tool name: 'Ant 1.9.4 (Linux)', type: 'hudson.tasks.Ant$AntInstallation'
   env.PATH="$ANT_HOME/bin:$env.PATH"
   MVN_HOME=tool name: 'Maven 3.1.1 (Linux)', type: 'hudson.tasks.Maven$MavenInstallation'
   env.PATH="$MVN_HOME/bin:$env.PATH"
   JAVA_HOME=tool name: 'Java 1.8.0p25 (Linux)', type: 'hudson.model.JDK' 
   env.PATH="$JAVA_HOME/bin:$env.PATH"
   env.JAVA_HOME="$JAVA_HOME"   
   env.PATH="$MVN_HOME/bin:$env.PATH" 
stage 'Files Checkout'

checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'LocalBranch', localBranch: 'master']], gitTool: 'Default', submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'buildJenkins', url: 'ssh://vcm.wal-mart.com/nimaut/applicationdeploymentautomation.git']]]
sh "git config user.name svcglsbuild"
sh "git config user.email svcglsbuild@wal-mart.com"

v = version()  
g = groupId()
stage 'Build, Release and Publish'

if(v!=null){
currentBuild.displayName=env.BUILD_NUMBER+'_v'+v
}

withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'buildCredentials', passwordVariable: 'buildPassword', usernameVariable: 'buildUser']]) {
   

    sh 'mvn --batch-mode clean release:clean release:prepare release:perform -DautoVersionSubmodules=true -Dusername=$buildUser -Dpassword=$buildPassword -U' 

    
}

stage 'GetDeploymentTarget'
   getAppFlowGroovy()
   flow = load 'AppInstallflow.groovy'
}

checkpoint 'Deploy to Sand boxes'
node('openstack'){

   ANT_HOME=tool name: 'Ant 1.9.4 (Linux)', type: 'hudson.tasks.Ant$AntInstallation'
   env.PATH="$ANT_HOME/bin:$env.PATH"
   MVN_HOME=tool name: 'Maven 3.1.1 (Linux)', type: 'hudson.tasks.Maven$MavenInstallation'
   env.PATH="$MVN_HOME/bin:$env.PATH"
   JAVA_HOME=tool name: 'Java 1.8.0p25 (Linux)', type: 'hudson.model.JDK' 
   env.PATH="$JAVA_HOME/bin:$env.PATH"
   env.JAVA_HOME="$JAVA_HOME"   
   env.PATH="$MVN_HOME/bin:$env.PATH" 

stage 'Deploy to Sand boxes'

if(v!=null){
currentBuild.displayName=env.BUILD_NUMBER+'_v'+v
}

   getAppFlowGroovy()
    flow.GetDeploymentTargertAndDeploy('AppInstall_DEV', v) 
}

checkpoint 'Deploy -> DEV boxes'
node('openstack'){

   ANT_HOME=tool name: 'Ant 1.9.4 (Linux)', type: 'hudson.tasks.Ant$AntInstallation'
   env.PATH="$ANT_HOME/bin:$env.PATH"
   MVN_HOME=tool name: 'Maven 3.1.1 (Linux)', type: 'hudson.tasks.Maven$MavenInstallation'
   env.PATH="$MVN_HOME/bin:$env.PATH"
   JAVA_HOME=tool name: 'Java 1.8.0p25 (Linux)', type: 'hudson.model.JDK' 
   env.PATH="$JAVA_HOME/bin:$env.PATH"
   env.JAVA_HOME="$JAVA_HOME"   
   env.PATH="$MVN_HOME/bin:$env.PATH" 

stage 'Deploy Dev'

if(v!=null){
currentBuild.displayName=env.BUILD_NUMBER+'_v'+v
}

   getAppFlowGroovy()
    flow.GetDeploymentTargertAndDeploy('DEV', v) 
}

def origBuildNumber = env.BUILD_NUMBER
checkpoint "Deploy App Install"
def target

if (origBuildNumber == env.BUILD_NUMBER) { 
    target = 'TEST'
} else { // retry from checkpoint
    target = input message: 'Which environment to Deploy?',
        parameters: [[$class: 'StringParameterDefinition', name: 'target']]
}


node('openstack'){

   ANT_HOME=tool name: 'Ant 1.9.4 (Linux)', type: 'hudson.tasks.Ant$AntInstallation'
   env.PATH="$ANT_HOME/bin:$env.PATH"
   MVN_HOME=tool name: 'Maven 3.1.1 (Linux)', type: 'hudson.tasks.Maven$MavenInstallation'
   env.PATH="$MVN_HOME/bin:$env.PATH"
   

stage "Deploy${target}"

if(v!=null){
currentBuild.displayName=env.BUILD_NUMBER+'_v'+v
}
 DeploymentScriptCheckout()
 getAppFlowGroovy()
  flow = load 'AppInstallflow.groovy'
    flow.GetDeploymentTargertAndDeploy("${target}", v)
    flow.GetDeploymentTargertAndDeploy('TEST2', v)
}

checkpoint 'Deploy -> CERT boxes'

stage 'Ready for CERT'
    mail  body: "This email has been generated by: ${env.BUILD_URL}. Please click on the link and approve the deployment", subject: "Ready to deploy AppInstall.${v} to CERT? workflow approval email", to: "glsngat@email.wal-mart.com"
    input message: 'does IT deloyment look good?', ok: 'deploy to CERT', submitter: "GLS NextGen Automation Team-glsngat"

 
stage 'Deploy CERT'
node('openstack'){
if(v!=null){
currentBuild.displayName=env.BUILD_NUMBER+'_v'+v
}

   getAppFlowGroovy()
	flow.GetDeploymentTargertAndDeploy('CERT1', v) 
	flow.GetDeploymentTargertAndDeploy('CERT2', v)
	flow.GetDeploymentTargertAndDeploy('CERT3', v)
}


checkpoint "Stage to Production"

if(ProdApproverEmail==null || ProdApproverEmail=='' ){
ProdApproverEmail='glsngat@email.wal-mart.com'
}      

if(ProdApprover==null || ProdApprover=='' ){
ProdApprover='GLS NextGen Automation Team-glsngat'
}
stage 'Ready for Production'

def ProductionTarget =input message: 'Please provide the Deployment Target for Production',
        parameters: [[$class: 'StringParameterDefinition', name: 'DeploymentTarget']]

 mail  body: "This email has been generated by: ${env.BUILD_URL}. Please click on the link and approve the Production deployment", subject: "Production Install:Ready to Install AppInstall.${v} to ${ProductionTarget}?", to: ProdApproverEmail

input message: "Please Approve Install of AppInstall.${v}  to ${ProductionTarget}", ok: 'Install', submitter: ProdApprover

node('openstack'){
    
    stage "Deploy -> Production"
		getAppFlowGroovy()
		flow.GetDeploymentTargertAndDeploy("${ProductionTarget}",v)

    	artifactId = "AppInstall"
	 createLatentCRQ(g,artifactId,v,ProductionTarget,'Pilot1 A Nodes Install')
}
//	def artifactId = AppInstall




def version() {
   def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
   matcher ? matcher[0][1] : null 
String version = matcher[0][1]

if (version =~ /SNAPSHOT/ ){
         def Version= version.split('-')
		versionNumber = Version[0]
         
    }else{
         println "The version doesn't have SNAPSHOT and the version number is "+ version
		 versionNumber = version
  }
    return versionNumber
}

def groupId() {
   def matcher = readFile('pom.xml') =~ '<groupId>(.+)</groupId>'
   matcher ? matcher[0][1] : null 
String groupNumber= matcher[0][1]

    return groupNumber
}

def createLatentCRQ(Group,ArtifactId,Version,Env,Stage){
def flow 
node('openstack'){
	getNextGenFlowGroovy()
	nextgenFlow = load 'nextgenworkflow.groovy' 
	nextgenFlow.crqLatentChange(Group,ArtifactId,Version,Env,ProdApproverEmail,Stage)
}
}

def getNextGenFlowGroovy(){

sh "curl  https://vcm.wal-mart.com/projects/SYSNIM/repos/deploymentautomation/browse/nextgenworkflow.groovy?raw > nextgenworkflow.groovy"
}

def getAppFlowGroovy(){

sh "curl  https://vcm.wal-mart.com/projects/SYSNIM/repos/deploymentautomation/browse/AppInstallflow.groovy?raw > AppInstallflow.groovy"
}

def DeploymentScriptCheckout(){
checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Git 1.9.4 (Linux)', submoduleCfg: [], userRemoteConfigs: [[url: 'ssh://vcm.wal-mart.com/SYSNIM/deploymentautomation']]])

}